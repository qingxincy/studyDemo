package com.study.demo;

import android.content.ContentProvider;
import android.content.ContentUris;
import android.content.ContentValues;
import android.content.Context;
import android.content.UriMatcher;
import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.net.Uri;

public class MyContentProvider extends ContentProvider {
    private static final String TAG = "MyContentProvider";
    private static final UriMatcher sUriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
    private static final String AUTHORITY = "com.study.demo.provider";
    private static final int CONNECT_STATUS_URL_CODE = 1;
    private Context mContext;
    private SQLiteDatabase mDataBase;
    public MyContentProvider() {
    }

    static {
        sUriMatcher.addURI(AUTHORITY, "connectStatus", CONNECT_STATUS_URL_CODE);
    }
    @Override
    public int delete(Uri uri, String selection, String[] selectionArgs) {
        int uriType = sUriMatcher.match(uri);
        int rowDelete = 0;
        switch (uriType) {
            case CONNECT_STATUS_URL_CODE:
                rowDelete = mDataBase.delete(DBHelper.DATABASE_TABLE_NAME, selection, selectionArgs);
                break;
            default:
                break;
        }
        if (rowDelete > 0) {
            mContext.getContentResolver().notifyChange(uri, null);
        }
        return rowDelete;
    }

    @Override
    public String getType(Uri uri) {
        return null;
    }

    @Override
    public Uri insert(Uri uri, ContentValues values) {
        int uriType = sUriMatcher.match(uri);
        long row = -2;
        switch (uriType) {
            case CONNECT_STATUS_URL_CODE:
                row = mDataBase.insert(DBHelper.DATABASE_TABLE_NAME, null,
                        values);
                break;
            default:
                break;
        }
        if (row > -1) {
            mContext.getContentResolver().notifyChange(uri, null);
            return ContentUris.withAppendedId(uri, row); //返回当前行的数据
        }
        return null;
    }

    @Override
    public boolean onCreate() {
        mContext = getContext();
        if (mContext == null) {
            return false;
        }
        mDataBase = new DBHelper(mContext).getWritableDatabase();
        return true;
    }

    @Override
    public Cursor query(Uri uri, String[] projection, String selection,
                        String[] selectionArgs, String sortOrder) {
        int uriType = sUriMatcher.match(uri);
        Cursor cursor = null;
        switch (uriType) {
            case CONNECT_STATUS_URL_CODE:
                cursor = mDataBase.query(DBHelper.DATABASE_TABLE_NAME, projection,
                        selection, selectionArgs, null, null, sortOrder);
                break;
            default:
                break;
        }
        return cursor;
    }

    @Override
    public int update(Uri uri, ContentValues values, String selection,
                      String[] selectionArgs) {
        int uriType = sUriMatcher.match(uri);
        int rowUpdate = 0;
        switch (uriType) {
            case CONNECT_STATUS_URL_CODE:
                rowUpdate = mDataBase.update(DBHelper.DATABASE_TABLE_NAME, values, selection, selectionArgs);
                break;
            default:
                break;
        }
        if (rowUpdate > 0) {
            mContext.getContentResolver().notifyChange(uri, null);
        }
        return rowUpdate;
    }
}
